{"version":3,"sources":["e:/Code/pixi/node_modules/browser-pack/_prelude.js","js/main.js","e:/Code/pixi/js/audioPlayer.js","e:/Code/pixi/js/background.js","e:/Code/pixi/js/bird.js","e:/Code/pixi/js/game.js","e:/Code/pixi/js/gameOverScreen.js","e:/Code/pixi/js/level.js","e:/Code/pixi/js/settings.js","e:/Code/pixi/js/setup.js","e:/Code/pixi/js/utils.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","let game = require('./game');\r\n\r\n(function() {\r\n    game.start();\r\n})();\r\n\r\n","let settings = require('./settings');\r\n\r\nlet audioPlayer = {\r\n\r\n    audioFragments: {\r\n        'FLAP': 'sfx_wing.ogg',\r\n        'HIT': 'sfx_hit.ogg',\r\n        'DIE': 'sfx_die.ogg',\r\n        'POINT': 'sfx_point.ogg',\r\n        'SWIM': 'sfx_blub.ogg',\r\n        'ENTER_WATER': 'sfx_water-enter.ogg',\r\n        'EXIT_WATER': 'sfx_water-exit.ogg',\r\n    },\r\n\r\n    _audio: [],\r\n\r\n    init() {\r\n        // Todo: Maybe we need to wait with starting the game until these have been loaded\r\n        for (let key in this.audioFragments) {\r\n            this._audio[this.audioFragments[key]] = new Audio(settings.soundsPath + this.audioFragments[key]);\r\n        }\r\n    },\r\n\r\n    play(audioFragment, callback) {\r\n        if (this._audio[audioFragment].currentTime > 0) {\r\n            this._audio[audioFragment].currentTime = 0;\r\n        }\r\n\r\n        this._audio[audioFragment].play();\r\n\r\n        if (typeof callback === 'function')\r\n            setTimeout(callback, this._audio[audioFragment].duration * 1000);\r\n    }\r\n};\r\n\r\naudioPlayer.init();\r\n\r\n\r\nmodule.exports = audioPlayer;\r\n","let settings = require('./settings.js');\r\nlet utils = require('./utils.js');\r\n\r\nvar background = {\r\n    /**\r\n     * The container that will contain all background tiles lined up\r\n     */\r\n    backgroundSprite: undefined,\r\n\r\n    /**\r\n     * Initialize the background\r\n     * @returns {PIXI.Sprite}\r\n     */\r\n    initialize() {\r\n        let skyTileTexture = utils.getTexture(settings.textures.background);\r\n        this.backgroundSprite = new PIXI.extras.TilingSprite(skyTileTexture, settings.gameWidth, skyTileTexture.height);\r\n        this.backgroundSprite.y = this._getBackgroundSpriteYPosition(skyTileTexture.height);\r\n\r\n        return this.backgroundSprite;\r\n    },\r\n\r\n    /**\r\n     * Update loop of the background\r\n     */\r\n    loop() {\r\n        this.backgroundSprite.tilePosition.x += -settings.backgroundSpeed;\r\n    },\r\n\r\n    /**\r\n     * Get the y position for the background sprite\r\n     * @returns {Number}\r\n     * @private\r\n     */\r\n    _getBackgroundSpriteYPosition(height) {\r\n        return settings.playableAreaAboveWater - height + utils.getTexture(settings.textures.ceiling).height;\r\n    }\r\n};\r\n\r\nmodule.exports = background;\r\n","let settings = require('./settings');\r\nlet utils = require('./utils');\r\n\r\nlet audioPlayer = require('./audioPlayer');\r\n\r\nlet bird = {\r\n    container: undefined,\r\n    bird: undefined,\r\n    boundingBox: undefined,\r\n    velocity: {x: 0, y: 0},\r\n    isBelowWater: false,\r\n\r\n    animationFrames: 4,\r\n\r\n    initialize() {\r\n        this.container = new PIXI.Container();\r\n\r\n        let spriteFrames = [];\r\n        for (let i = 0; i < this.animationFrames; i++) {\r\n            spriteFrames.push(utils.getTexture('bird_' + i +  '.png'));\r\n        }\r\n        this.bird = new PIXI.extras.AnimatedSprite(spriteFrames);\r\n\r\n        this.bird.animationSpeed = 0.2;\r\n        this.bird.play();\r\n\r\n        this.bird.anchor.x = 0.5;\r\n        this.bird.anchor.y = 0.5;\r\n\r\n        this.bird.y = 150;\r\n        this.bird.x = 100;\r\n\r\n        this.container.addChild(this.bird);\r\n\r\n        this.boundingBox = {x: 0, y: 0, width: 0, height: 0};\r\n\r\n        return this.container;\r\n    },\r\n\r\n    loop() {\r\n        if (this.isBelowWater) {\r\n            this.belowWater();\r\n        } else {\r\n            this.aboveWater();\r\n        }\r\n\r\n        this.bird.y += this.velocity.y;\r\n        this.bird.rotation = Math.atan2(this.velocity.y, settings.forwardSpeed);\r\n    },\r\n\r\n    aboveWater() {\r\n        this.velocity.y += settings.gravity;\r\n    },\r\n\r\n    belowWater() {\r\n        this.velocity.y -= settings.waterPushForce;\r\n    },\r\n\r\n    flap() {\r\n        if (settings.shouldBirdFlapResetVelocity ) {\r\n            this.velocity.y = 0;\r\n        }\r\n\r\n        if (this.isBelowWater) {\r\n            this._swim();\r\n        } else {\r\n            this._flap();\r\n        }\r\n    },\r\n\r\n    reset() {\r\n        this.bird.y = 150;\r\n        this.bird.x = 100;\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n    },\r\n\r\n    getTop() {\r\n        return this.bird.y - this.bird.height / 2;\r\n    },\r\n\r\n    getBottom() {\r\n        return this.bird.y + this.bird.height / 2;\r\n    },\r\n\r\n    getRight() {\r\n        return this.bird.x + this.bird.width / 2;\r\n    },\r\n\r\n    getLeft() {\r\n        return this.bird.x - this.bird.width / 2;\r\n    },\r\n\r\n    enterWater() {\r\n        if (this.isBelowWater) return;\r\n        this.isBelowWater = true;\r\n\r\n        audioPlayer.play(audioPlayer.audioFragments.ENTER_WATER);\r\n    },\r\n\r\n    leaveWater() {\r\n        if (!this.isBelowWater) return;\r\n        this.isBelowWater = false;\r\n\r\n        audioPlayer.play(audioPlayer.audioFragments.EXIT_WATER);\r\n    },\r\n\r\n    _flap() {\r\n        audioPlayer.play(audioPlayer.audioFragments.FLAP);\r\n\r\n        this.velocity.y -= settings.birdFlapVelocity;\r\n    },\r\n\r\n    _swim() {\r\n        audioPlayer.play(audioPlayer.audioFragments.SWIM);\r\n\r\n        this.velocity.y += settings.birdFlapVelocity;\r\n    }\r\n};\r\n\r\nmodule.exports = bird;\r\n","let setup = require('./setup');\r\n\r\nlet gameOverScreen = require('./gameOverScreen');\r\nlet audioPlayer = require('./audioPlayer');\r\nlet settings = require('./settings');\r\nlet utils = require('./utils');\r\n\r\nlet background = require('./background');\r\nlet level = require('./level');\r\nlet bird = require('./bird');\r\n\r\nlet game = {\r\n    renderer: undefined,\r\n    stage: undefined,\r\n\r\n    /**\r\n     * Whether the game (loop) has stopped or not\r\n     */\r\n    hasStopped: false,\r\n\r\n    /**\r\n     * Start the game\r\n     */\r\n    start() {\r\n        this.renderer = setup.renderer();\r\n        setup.loadAssets(this.initialize.bind(this));\r\n    },\r\n\r\n    /**\r\n     * Initialize all required parts of the game\r\n     */\r\n    initialize() {\r\n        this.stage = new PIXI.Container();\r\n\r\n        this.stage.addChild(background.initialize());\r\n        this.stage.addChild(level.initialize());\r\n        this.stage.addChild(bird.initialize());\r\n\r\n        this.stage.addChild(this._getWaterSprite());\r\n\r\n        let onRestartClick = this._clickRestart.bind(this);\r\n        this.stage.addChild(gameOverScreen.initialize(onRestartClick));\r\n\r\n        this.renderer.render(this.stage);\r\n\r\n        this._setEvents();\r\n\r\n        this.loop();\r\n    },\r\n\r\n    /**\r\n     * The game loop\r\n     */\r\n    loop() {\r\n        requestAnimationFrame(this.loop.bind(this));\r\n\r\n        // This causes the game loop to freeze. Is used when the players hits something and a menu is shown to _restart\r\n        if (this.hasStopped) return;\r\n\r\n        background.loop();\r\n        level.loop();\r\n        bird.loop();\r\n\r\n        this._handleCollision();\r\n\r\n        this.renderer.render(this.stage);\r\n    },\r\n\r\n    /**\r\n     * Trigger game over happening\r\n     * @private\r\n     */\r\n    _gameOver() {\r\n        this._stop();\r\n        this._playDieAudio();\r\n\r\n        // Show game over screen\r\n        gameOverScreen.updateScores(level.score, level.bestScore);\r\n        gameOverScreen.show();\r\n    },\r\n\r\n    /**\r\n     * Function to be called when _restart is clicked from the game over screen\r\n     * @private\r\n     */\r\n    _clickRestart() {\r\n        this._restart();\r\n        gameOverScreen.hide();\r\n    },\r\n\r\n    /**\r\n     * Stop the game\r\n     * @private\r\n     */\r\n    _stop() {\r\n        this.hasStopped = true;\r\n    },\r\n\r\n    /**\r\n     * Continue the game after stopping\r\n     * @private\r\n     */\r\n    _restart() {\r\n        level.reset();\r\n        bird.reset();\r\n\r\n        this.hasStopped = false;\r\n    },\r\n\r\n    /**\r\n     * Handle collision between the bird and 'obstacles'\r\n     * @private\r\n     */\r\n    _handleCollision() {\r\n        // Check if the bird is below or underneath the water\r\n        if (bird.getTop() < level.getWaterLevel() && bird.isBelowWater) {\r\n            bird.leaveWater();\r\n        } else if (bird.getTop() >= level.getWaterLevel() && !bird.isBelowWater) {\r\n            bird.enterWater();\r\n        }\r\n\r\n        // Ceiling collision\r\n        if (bird.getTop() <= level.ceilingSprite.y + level.ceilingSprite.height) {\r\n            this.gameOver();\r\n        }\r\n\r\n        // Floor collision\r\n        if (bird.getBottom() >= level.ceilingSprite.y + level.ceilingSprite.height + settings.playableAreaAboveWater + settings.playableAreaBelowWater) {\r\n            this.gameOver();\r\n        }\r\n\r\n        if (level.pipeCollision(bird)) {\r\n            this.gameOver();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Play the audio for when the player dies\r\n     * @private\r\n     */\r\n    _playDieAudio() {\r\n        audioPlayer.play(audioPlayer.audioFragments.HIT,\r\n            audioPlayer.play.bind(audioPlayer, audioPlayer.audioFragments.DIE)\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Set the required events for interacting with the game\r\n     * @private\r\n     */\r\n    _setEvents() {\r\n        window.addEventListener(\"keyup\", (e) => {\r\n            if (e.keyCode != 32) return; // Not spacebar\r\n            if (this.hasStopped) {\r\n                this._clickRestart();\r\n                return;\r\n            }\r\n            bird.flap();\r\n        }, false);\r\n\r\n        if (\"ontouchstart\" in window) {\r\n            window.addEventListener(\"touchstart\", () => {\r\n                if (this.hasStopped) return;\r\n                bird.flap();\r\n            });\r\n        } else {\r\n            window.addEventListener(\"mousedown\", () => {\r\n                if (this.hasStopped) return;\r\n                bird.flap();\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Create and get the tiled sprite for the water\r\n     * @returns {TilingSprite|PIXI.TilingSprite|{enumerable, get}|*}\r\n     * @private\r\n     */\r\n    _getWaterSprite() {\r\n        let waterTexture = utils.getTexture(settings.textures.WATER);\r\n        let waterSprite = new PIXI.extras.TilingSprite(waterTexture, settings.gameWidth, settings.playableAreaBelowWater);\r\n        waterSprite.y = utils.getTexture(settings.textures.ceiling).height + settings.playableAreaAboveWater;\r\n\r\n        return waterSprite;\r\n    }\r\n};\r\n\r\nmodule.exports = game;\r\n","let settings = require('./settings');\r\nlet utils = require('./utils');\r\n\r\nlet gameOverScreen = {\r\n\r\n    /**\r\n     * The callback when the _restart button is clicked\r\n     */\r\n    onClickRestart: undefined,\r\n\r\n    /**\r\n     * The container that will hold the game over container\r\n     */\r\n    container: undefined,\r\n\r\n    /**\r\n     * The container that will hold the the scores and the game over sprite\r\n     */\r\n    gameOverContainer: undefined,\r\n\r\n    scoreYPosition: 93,\r\n    bestScoreYPosition: 135,\r\n    restartButtonYPosition: 190,\r\n    gameOverContainerXPosition: 150,\r\n\r\n    /**\r\n     * Because the score box is not perfectly centered we add some offset\r\n     */\r\n    elementsXOffset: 2,\r\n\r\n    /**\r\n     * Create the game over screen, should only be called once\r\n     */\r\n    initialize(callback) {\r\n        this._setRestartCallback(callback);\r\n\r\n        this.container = new PIXI.Container();\r\n\r\n        this.container.y = this._getContainerYPosition();\r\n        this.container.x = this.gameOverContainerXPosition;\r\n\r\n        this.gameOverContainer = new PIXI.Sprite(utils.getTexture(settings.textures.GAME_OVER));\r\n\r\n        this._renderScores(0, 0);\r\n\r\n        let restartButton = new PIXI.Sprite(utils.getTexture(settings.textures.RESTART));\r\n        restartButton.x = this.gameOverContainer.width / 2 - restartButton.width / 2 + this.elementsXOffset;\r\n        restartButton.y = this.restartButtonYPosition;\r\n        restartButton.interactive = true;\r\n        restartButton.buttonMode = true;\r\n        restartButton.defaultCursor = 'pointer';\r\n\r\n        restartButton.addListener(\"click\", this.onClickRestart);\r\n\r\n        if (\"ontouchstart\" in window) {\r\n            restartButton.addListener(\"touchstart\", this.onClickRestart);\r\n        }\r\n\r\n        this.gameOverContainer.addChild(restartButton);\r\n\r\n        this.container.addChild(this.gameOverContainer);\r\n\r\n        this.hide();\r\n\r\n        return this.container;\r\n    },\r\n\r\n    /**\r\n     * Update the game over screen with the new scores\r\n     */\r\n    updateScores(score, bestScore) {\r\n        this._clearScores();\r\n        this._renderScores(score, bestScore);\r\n    },\r\n\r\n    /**\r\n     * Hide the game over screen\r\n     */\r\n    hide() {\r\n        this.gameOverContainer.visible = false;\r\n    },\r\n\r\n    /**\r\n     * Show the game over screen\r\n     */\r\n    show() {\r\n        this.gameOverContainer.visible = true;\r\n    },\r\n\r\n    /**\r\n     * Set the callback for when the _restart button has been pressed\r\n     * @param callback\r\n     * @private\r\n     */\r\n    _setRestartCallback(callback) {\r\n        if (typeof callback !== 'function') throw new Error('Supplied callback is not a function');\r\n\r\n        this.onClickRestart = callback;\r\n    },\r\n\r\n    /**\r\n     * @param score\r\n     * @param bestScore\r\n     * @private\r\n     */\r\n    _renderScores(score, bestScore) {\r\n        this.scoreSprite = utils.scoreToSprites(score, utils.scoreSize.SMALL);\r\n        this.scoreSprite.x = this.gameOverContainer.width / 2 - this.scoreSprite.width / 2 + this.elementsXOffset;\r\n        this.scoreSprite.y = this.scoreYPosition;\r\n\r\n        this.bestScoreSprite = utils.scoreToSprites(bestScore, utils.scoreSize.SMALL);\r\n        this.bestScoreSprite.x = this.gameOverContainer.width / 2 - this.bestScoreSprite.width / 2 + this.elementsXOffset;\r\n        this.bestScoreSprite.y = this.bestScoreYPosition;\r\n\r\n        this.gameOverContainer.addChild(this.scoreSprite);\r\n        this.gameOverContainer.addChild(this.bestScoreSprite);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _clearScores() {\r\n        this.gameOverContainer.removeChild(this.scoreSprite);\r\n        this.gameOverContainer.removeChild(this.bestScoreSprite);\r\n    },\r\n\r\n    /**\r\n     * @returns {number}\r\n     * @private\r\n     */\r\n    _getContainerYPosition() {\r\n        let ceilingHeight = utils.getTexture(settings.textures.ceiling).height;\r\n        let gameOverScreenHeight = utils.getTexture(settings.textures.GAME_OVER).height;\r\n        return (ceilingHeight + settings.playableAreaAboveWater + settings.playableAreaBelowWater) / 2 - gameOverScreenHeight / 2;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = gameOverScreen;\r\n","let settings = require('./settings');\r\nlet utils = require('./utils.js');\r\n\r\nlet audioPlayer = require('./audioPlayer');\r\n\r\nconst pipeFacing = {\r\n    'UP': 1,\r\n    'DOWN': -1,\r\n};\r\n\r\nlet level = {\r\n    /**\r\n     * The container that will contain everything that needs to be moved towards the player\r\n     */\r\n    container: undefined,\r\n    /**\r\n     * The container that will contain all floor tiles\r\n     */\r\n    floorSprite: undefined,\r\n\r\n    ceilingSprite: undefined,\r\n\r\n    pipesContainer: undefined,\r\n    pipes: [],\r\n\r\n    pipeTexture: undefined,\r\n    pipeTopTexture: undefined,\r\n    pipeBottomTexture: undefined,\r\n\r\n    firstPipeFacing: pipeFacing.UP,\r\n\r\n    nextPipeFacing: 0,\r\n    placedPipesCount: 0,\r\n\r\n    playerInsidePipe: false,\r\n\r\n    pipeGapSize: 100,\r\n\r\n    pipeDistance: 400,\r\n    firstPipeDistance: 800,\r\n\r\n    score: 0,\r\n    bestScore: 0,\r\n    scoreContainer: undefined,\r\n\r\n    initialize() {\r\n        this.container = new PIXI.Container();\r\n\r\n        this.container.addChild(this._createCeiling());\r\n        this.container.addChild(this._createFloor());\r\n\r\n        // Pipes stuff\r\n        this.nextPipeFacing = this.firstPipeFacing;\r\n        this.pipeTexture = utils.getTexture(settings.textures.pipe);\r\n        this.pipeTopTexture = utils.getTexture(settings.textures.pipeUp);\r\n        this.pipeBottomTexture = utils.getTexture(settings.textures.pipeDown);\r\n\r\n        this.pipesContainer = new PIXI.Container();\r\n\r\n        this._initialPipes();\r\n\r\n        this.container.addChild(this.pipesContainer);\r\n\r\n        // Score\r\n        this.scoreContainer = new PIXI.Container();\r\n        this.scoreContainer.addChild(utils.scoreToSprites(this.score, utils.scoreSize.BIG));\r\n\r\n        // Todo: Make vars\r\n        this.scoreContainer.x = 10;\r\n        this.scoreContainer.y = utils.getTexture(settings.textures.ceiling).height + 10;\r\n\r\n        this.container.addChild(this.scoreContainer);\r\n\r\n        return this.container;\r\n    },\r\n\r\n    reset() {\r\n        this.score = 0;\r\n        this.scoreContainer.removeChild(this.scoreContainer.children[0]);\r\n        this.scoreContainer.addChild(utils.scoreToSprites(this.score, utils.scoreSize.BIG));\r\n\r\n        this.pipesContainer.x = 0;\r\n        this.pipesContainer.children.splice(0);\r\n        this.pipes = [];\r\n        this.playerInsidePipe = false;\r\n        this.nextPipeFacing = this.firstPipeFacing;\r\n        this.placedPipesCount = 0;\r\n        this._initialPipes();\r\n    },\r\n\r\n    loop() {\r\n        this.ceilingSprite.tilePosition.x += -settings.forwardSpeed;\r\n        this.floorSprite.tilePosition.x += -settings.forwardSpeed;\r\n\r\n        // Pipes stuff\r\n        this.pipesContainer.x += -settings.forwardSpeed;\r\n\r\n        // Remove pipes when they're off screen\r\n        if (this.pipes.length > 0) {\r\n\r\n            if (this.pipesContainer.x < -this.pipes[0].x - this.pipeTexture.width) {\r\n                this.pipesContainer.removeChild(this.pipes[0]);\r\n                this.pipes.shift();\r\n\r\n                this._placeNewPipe();\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Get the y position of the water\r\n     */\r\n    getWaterLevel() {\r\n        return settings.playableAreaAboveWater;\r\n    },\r\n\r\n    pipeCollision(bird) {\r\n\r\n        // We will check if the bird is colliding with the first pipe\r\n        // The bird can't possibly hit any other pipes\r\n\r\n        // We only need to collide with the left side of the pipes and the top/bottom pieces\r\n        // We know how far the pipe container has moved to the right, we can use this to get the left side\r\n\r\n        // Because of square collision it can feel unfair when hitting the sides of the pipes while at an angle\r\n        // Which often happens when diving through the gap. To make things a bit fairer, added a small margin;\r\n        let collisionMargin = 2;\r\n\r\n        let left = this.pipesContainer.x + this.pipes[0].x + collisionMargin;\r\n        let right = left + utils.getTexture(settings.textures.pipe).width - collisionMargin;\r\n        \r\n        // The bird is in the left/right boundaries of the first pipe\r\n        if (bird.getRight() > left && bird.getLeft() < right) {\r\n\r\n            this.playerInsidePipe = true;\r\n\r\n            // The bird is above the gap!\r\n            if (bird.getTop() < this.pipes[0].gap.top || bird.getBottom() > this.pipes[0].gap.bottom) {\r\n                return true;\r\n            }\r\n        } else if (this.playerInsidePipe) {\r\n            // Player has passed the pipe\r\n            this._increaseScore();\r\n            this.playerInsidePipe = false;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    _createCeiling() {\r\n        let ceilingTexture = utils.getTexture(settings.textures.ceiling);\r\n\r\n        this.ceilingSprite = new PIXI.extras.TilingSprite(ceilingTexture, settings.gameWidth, ceilingTexture.height);\r\n\r\n        return this.ceilingSprite;\r\n    },\r\n\r\n    _createFloor() {\r\n        let floorTexture = utils.getTexture(settings.textures.floor);\r\n\r\n        this.floorSprite = new PIXI.extras.TilingSprite(floorTexture, settings.gameWidth, floorTexture.height);\r\n        this.floorSprite.y = settings.playableAreaAboveWater + settings.playableAreaBelowWater + utils.getTexture(settings.textures.ceiling).height;\r\n\r\n        return this.floorSprite;\r\n    },\r\n\r\n    _initialPipes() {\r\n        let startingPipesCount = Math.ceil(settings.gameWidth / this.pipeDistance);\r\n\r\n        for (let i = 0; i < startingPipesCount; i++) {\r\n            let pipe = this._createPipe(this._getRandomPipeHeight(), this.nextPipeFacing);\r\n            pipe.x = this.firstPipeDistance + this.pipeDistance * i;\r\n            this.pipesContainer.addChild(pipe);\r\n            this.pipes.push(pipe);\r\n\r\n            this.nextPipeFacing *= -1;\r\n            this.placedPipesCount++;\r\n        }\r\n    },\r\n\r\n    _placeNewPipe() {\r\n        // We need total pipe amount, to calculate position of new one\r\n        let pipe = this._createPipe(this._getRandomPipeHeight(), this.nextPipeFacing);\r\n        pipe.x = this.placedPipesCount * this.pipeDistance + this.firstPipeDistance;\r\n        this.pipesContainer.addChild(pipe);\r\n        this.pipes.push(pipe);\r\n\r\n        this.nextPipeFacing *= -1;\r\n        this.placedPipesCount++;\r\n    },\r\n\r\n    _createPipe(height, direction) {\r\n        let container = new PIXI.Container();\r\n\r\n        let totalPlayHeight = settings.playableAreaAboveWater + settings.playableAreaBelowWater;\r\n\r\n        if (direction === pipeFacing.UP) {\r\n            container.addChild(this._createUpFacingPipe(height));\r\n        } else if (direction === pipeFacing.DOWN) {\r\n            container.addChild(this._createDownFacingPipe(height));\r\n        }\r\n\r\n        // Check if we have space for pipe in opposite direction to complete the gap\r\n        if (height + this.pipeGapSize < totalPlayHeight) {\r\n            // We can fit another pipe opposite to it\r\n            let oppositePipeHeight = totalPlayHeight - height - this.pipeGapSize;\r\n            if (direction === pipeFacing.UP)\r\n                container.addChild(this._createDownFacingPipe(oppositePipeHeight));\r\n\r\n            if (direction === pipeFacing.DOWN)\r\n                container.addChild(this._createUpFacingPipe(oppositePipeHeight));\r\n        }\r\n\r\n        // Store the information of the gap position in the container object for easier collision checks\r\n        let top = (direction === pipeFacing.UP ? totalPlayHeight - height - this.pipeGapSize : height) + this.ceilingSprite.height;\r\n        let bottom = (direction === pipeFacing.UP ? totalPlayHeight - height : height + this.pipeGapSize) + this.ceilingSprite.height;\r\n        container.gap = { top, bottom }\r\n\r\n        return container;\r\n    },\r\n\r\n    _createUpFacingPipe(height) {\r\n        let container = new PIXI.Container();\r\n\r\n        let pipeTop = new PIXI.Sprite(this.pipeTopTexture);\r\n        container.addChild(pipeTop);\r\n\r\n        let pipePartHeight = height - this.pipeTopTexture.height;\r\n\r\n        let pipe = new PIXI.extras.TilingSprite(this.pipeTexture, this.pipeTexture.width, pipePartHeight);\r\n        pipe.y = this.pipeTopTexture.height;\r\n        container.addChild(pipe);\r\n\r\n        // Place pipe on the bottom\r\n        container.y = settings.playableAreaAboveWater + settings.playableAreaBelowWater - height + utils.getTexture(settings.textures.ceiling).height;\r\n\r\n        return container;\r\n    },\r\n\r\n    _createDownFacingPipe(height) {\r\n        let container = new PIXI.Container();\r\n\r\n        let pipePartHeight = height - this.pipeBottomTexture.height;\r\n\r\n        let pipe = new PIXI.extras.TilingSprite(this.pipeTexture, this.pipeTexture.width, pipePartHeight);\r\n        container.addChild(pipe);\r\n\r\n        let pipeBottom = new PIXI.Sprite(this.pipeBottomTexture);\r\n        pipeBottom.y = pipePartHeight;\r\n        container.addChild(pipeBottom);\r\n\r\n        // We can place it against the ceiling\r\n        container.y = utils.getTexture(settings.textures.ceiling).height;\r\n\r\n        return container;\r\n    },\r\n\r\n    _increaseScore() {\r\n        audioPlayer.play(audioPlayer.audioFragments.POINT);\r\n        this.score++;\r\n\r\n        if (this.score > this.bestScore) this.bestScore = this.score;\r\n\r\n        // Because we put all digits inside one container, we only have to remove on child\r\n        this.scoreContainer.removeChild(this.scoreContainer.children[0]);\r\n\r\n        this.scoreContainer.addChild(utils.scoreToSprites(this.score, utils.scoreSize.BIG));\r\n   },\r\n\r\n    _getRandomPipeHeight() {\r\n        // Todo: Grab from settings somewhere\r\n        let minHeight = 280;\r\n        let maxHeight = 390;\r\n\r\n        return Math.random() * (maxHeight - minHeight) + minHeight;\r\n    },\r\n};\r\n\r\nmodule.exports = level;\r\n","const settings = {\r\n    /**\r\n     * The location of the assets json\r\n     */\r\n    assetFile: \"assets/assets.json\",\r\n\r\n    soundsPath: \"assets/sounds/\",\r\n\r\n    /**\r\n     * The area that is available above the water\r\n     */\r\n    playableAreaAboveWater: 260,\r\n\r\n    playableAreaBelowWater: 260,\r\n\r\n    gameWidth: 0,\r\n\r\n    gameOverScreenPosition: { x: 0, y: 0 },\r\n\r\n    /**\r\n     * The speed at which objects move towards the player\r\n     */\r\n    forwardSpeed: 5,\r\n\r\n    /**\r\n     * The speed at which the background moves\r\n     */\r\n    backgroundSpeed: 2,\r\n\r\n    /**\r\n     * The amount of gravity added to the velocity of the player while above the water\r\n     */\r\n    gravity: 0.3,\r\n\r\n    /**\r\n     * The amount of upward force added to the velocity of the player while below the water\r\n     */\r\n    waterPushForce: 0.3,\r\n\r\n    /**\r\n     * The amount of upward velocity is added to the player on 'flapping'.\r\n     */\r\n    birdFlapVelocity: 4.5,\r\n\r\n    /**\r\n     * If vertical velocity of the player should be reset before applying the flap velocity\r\n     */\r\n    shouldBirdFlapResetVelocity: true,\r\n\r\n    ceilingSpriteHeight: 0,\r\n\r\n    textures: {\r\n        'background': 'sky.png',\r\n        'floor': 'land.png',\r\n        'ceiling': 'ceiling.png',\r\n        'pipe': 'pipe.png',\r\n        'pipeUp': 'pipe-up.png',\r\n        'pipeDown': 'pipe-down.png',\r\n        'WATER': 'water.png',\r\n        'GAME_OVER': 'scoreboard.png',\r\n        'RESTART': 'replay.png',\r\n        'BIG_0': 'font_big_0.png',\r\n        'BIG_1': 'font_big_1.png',\r\n        'BIG_2': 'font_big_2.png',\r\n        'BIG_3': 'font_big_3.png',\r\n        'BIG_4': 'font_big_4.png',\r\n        'BIG_5': 'font_big_5.png',\r\n        'BIG_6': 'font_big_6.png',\r\n        'BIG_7': 'font_big_7.png',\r\n        'BIG_8': 'font_big_8.png',\r\n        'BIG_9': 'font_big_9.png',\r\n        'SMALL_0': 'font_small_0.png',\r\n        'SMALL_1': 'font_small_1.png',\r\n        'SMALL_2': 'font_small_2.png',\r\n        'SMALL_3': 'font_small_3.png',\r\n        'SMALL_4': 'font_small_4.png',\r\n        'SMALL_5': 'font_small_5.png',\r\n        'SMALL_6': 'font_small_6.png',\r\n        'SMALL_7': 'font_small_7.png',\r\n        'SMALL_8': 'font_small_8.png',\r\n        'SMALL_9': 'font_small_9.png',\r\n    },\r\n\r\n    init() {\r\n        this.gameWidth = window.innerWidth;\r\n    }\r\n};\r\n\r\nsettings.init();\r\n\r\nmodule.exports = settings;\r\n","let settings = require('./settings');\r\n\r\nlet setup = {\r\n    /**\r\n     * Set up the renderer\r\n     * @returns {PIXI.WebGLRenderer|PIXI.CanvasRenderer}\r\n     */\r\n    renderer() {\r\n        let renderer = PIXI.autoDetectRenderer(settings.gameWidth, window.innerHeight);\r\n        renderer.view.style.position = \"absolute\";\r\n        renderer.view.style.display = \"block\";\r\n        renderer.backgroundColor = 0x4ec0ca;\r\n        renderer.autoResize = true;\r\n\r\n        document.body.appendChild(renderer.view);\r\n\r\n        return renderer;\r\n    },\r\n\r\n    /**\r\n     * Load the assets\r\n     * @param callback action to perform after assets have been loaded\r\n     */\r\n    loadAssets(callback) {\r\n        if (typeof callback !== 'function') throw new Error('Callback must be a function');\r\n\r\n        PIXI.loader.add(\"assets/assets.json\").load(callback);\r\n    }\r\n};\r\n\r\nmodule.exports = setup;\r\n","let settings = require('./settings');\r\n\r\nlet utils = {\r\n\r\n    scoreSize: {\r\n        'SMALL': 0,\r\n        'BIG': 1\r\n    },\r\n\r\n    /**\r\n     * Get a texture from the pixi loader by name\r\n     * @param name texture name, with extension\r\n     * @returns {*|PIXI.Texture|FrameObject}\r\n     */\r\n    getTexture(name) {\r\n        return PIXI.loader.resources[settings.assetFile].textures[name]\r\n    },\r\n\r\n    /**\r\n     * Fill a given pixi container and fill it with vertically aligned tiles fitting whole window width\r\n     * @param container\r\n     * @param texture\r\n     */\r\n    fillContainerWithWindowWidthTiles(container, texture) {\r\n        let requiredTiles = this._getRequiredWidthTiles(texture.width);\r\n\r\n        for (let i = 0; i < requiredTiles; i++) {\r\n            let tile = new PIXI.Sprite(texture);\r\n            tile.x = tile.width * i;\r\n            container.addChild(tile);\r\n        }\r\n    },\r\n\r\n    scoreToSprites(score, size) {\r\n        let stringScore = score.toString();\r\n\r\n        let texturePrefix = size === this.scoreSize.BIG ? 'BIG_' : 'SMALL_';\r\n        let letterSpacing = size === this.scoreSize.BIG ? 25 : 10;\r\n\r\n\r\n        let digitsContainer = new PIXI.Container();\r\n\r\n        for (let i = 0, len = stringScore.length; i < len; i++) {\r\n            let digit = new PIXI.Sprite(this.getTexture(settings.textures[texturePrefix + stringScore.charAt(i)]));\r\n            digit.x = i * letterSpacing;\r\n            digitsContainer.addChild(digit)\r\n        }\r\n\r\n        return digitsContainer;\r\n    },\r\n\r\n    _getRequiredWidthTiles(tileWidth) {\r\n        return Math.ceil(settings.gameWidth / tileWidth) + 1;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = utils;\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}